.TH laserLANG 1
.SH "NAME"
laserLANG \- An esolang that focus on laser reflection
.SH "SYNOPSIS"
laserLANG [programfile]
.SH "DESCRIPTION"
laserLANG is a esoteric programming language, which is inspired by marioLANG and
brainfuck.

.SH "MEMORY MANAGEMENT"
Each memory cell is an signed char, capable of containing at least the [-127,
+127] range.
.IP "\fB>\fR" 4
Move memory pointer right
.IP "\fB<\fR" 4
Move memory pointer left
.IP "\fB-\fR" 4
Add one to memory cell under the pointer
.IP "\fB'\fR" 4
Subtract one from memory cell under the pointer
.IP "\fB=\fR" 4
Output ASCII character from the current memory cell
.IP "\fB""\fR" 4
Output numeric value from the current memory cell

.SH "CONTROL FLOW"
.IP "\fB+\fR" 4
Turn the laser 90 degree clockwise when the current memory cell is positive,
counter clockwise when negative. Continue unhindered when zero.
.IP "\fB#\fR" 4
Turn the laser 90 degree counter clockwise when the current memory cell is
positive, clockwise when negative. Continue unhindered when zero.
.IP "\fB/\fR and \fB\e\fR" 4
Consider these as mirrors that are hit from a 45 degree angle. The laser will
reflect with an angle corresponding to the input angle.
.IP "\fB-\fR and \fB=\fR" 4
If the laser hits these going on the \fBy axis\fR it will shatter, otherwise it will
continue unhindered.
.IP "\fB'\fR and \fB""\fR" 4
If the laser hits these going on the \fBx axis\fR it will shatter, otherwise it will
continue unhindered.
.IP "\fB<\fR"
If the laser hit this going \fBright\fR it will shatter, otherwise it will
continue towards \fBleft.\fR
.IP "\fB>\fR"
If the laser hit this going \fBleft\fR it will shatter, otherwise it will
continue towards \fBright.\fR
.IP "\fB^\fR"
If the laser hit this going \fBdown\fR it will shatter, otherwise it will
continue towards \fBup\fR.
.IP "\fBv\fR"
If the laser hit this going \fBup\fR it will shatter, otherwise it will continue
towards \fBdown\fR.

.SH "DEBUG"
.IP "\fBp\fR" 4
Will print laser position and memory cell values

.SH "COMMENTS"
Anything not recognized as a command is a comment.

.SH "EXAMPLE"
An example "Hello World!" program can be written as the following:
.PP
\&----------\e                    /<<<<\e
.br
\&                               '
.br
\&          v                    /
.br
\&          #>------->---------->--->-/
.br
\&          >--=>-=-------==---=>--=\e
.br
\&                /=---------------<<
.br
\&                \e>=---=\e /=>-=>=
.br
\&                         '
.br
\&                         '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       \e=/
.PP
Output: Hello World!

.PP
The code below outputs 4:

\&----\e
.br
\&    "

This gets done because `-' adds one to the memory cell, `\e' reflects the laser
downwards, and `"' prints it's numeric value.

.PP

The first part is a loop:

----------\e                    /<<<<\e
.br
                               '
.br
          v                    /
.br
          #>------->---------->--->-/

The laser gets shot in the top left corner moving to the right (Along the x
axis), when it reaches the `\e' the first memory cell contains 10.

The `\e' will send the laser downwards where it reaches the `v', which does
nothing when approached from above.

The `#' is a junction sending the laser 90 degree counter clockwise if the
memory cell under the pointer is positive.

`>' moves the memory pointer to the right.

The laser will eventually end at `/', at which point it will be reflected
upwards.

`'' will subtract one from the memory cell under the pointer.

The laser will hit the `v' from the side making it go downwards.

The loop finishes with the values `0', `70', `100', `30', `10' in the memory
cells, at which point the `#' junction will do nothing, as the cell under the
cusor is zero.
