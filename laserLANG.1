.TH laserLANG 1
.SH "NAME"
laserLANG \- Another esolang that focus on reflecting a laser
.SH "SYNOPSIS"
laserLANG [programfile]
.SH "DESCRIPTION"
laserLANG is a esoteric programming language, which is inspired by marioLANG and
brainfuck.

.SH "MEMORY MANAGEMENT"
Each memory cell is an signed 8 bit integer, ranging from [-128, +127], there is
no overflow protection, making 127 + 1 = -128.
.IP "\fB>\fR" 4
Move memory pointer right
.IP "\fB<\fR" 4
Move memory pointer left
.IP "\fB-\fR" 4
Add one to memory cell under the pointer
.IP "\fB'\fR" 4
Subtract one from memory cell under the pointer
.IP "\fB=\fR" 4
Output ascii character from the current memory cell
.IP "\fB""\fR" 4
Output numeric value from the current memory cell

.SH "CONTROL FLOW"
.IP "\fB+\fR" 4
Turn the direction 90 degree clockwise when the current memory cell is positive,
counter clockwise when negative.
.IP "\fB#\fR" 4
Turn the direction 90 degree counter clockwise when the current memory cell is
positive, clockwise when negative.
.IP "\fB/\fR" 4
Toggle right and up direction, and left and down direction.
.IP "\fB\e\fR" 4
Toggle right and down direction, and left and up direction.
.IP "\fB-\fR and \fB=\fR" 4
The laser will stop if it hits any of these while going on the y axis.
.IP "\fB'\fR and \fB""\fR" 4
The laser will stop if it hits any of these while going on the x axis.
.IP "\fB<\fR"
The laser will stop if it's going right, otherwise it will be going left.
.IP "\fB>\fR"
The laser will stop if it's going left, otherwise it will be going right.
.IP "\fB^\fR"
The laser will stop if it's going down, otherwise it will be going up.
.IP "\fBv\fR"
The laser will stop if it's going up, otherwise it will be going down.

.SH "DEBUG"
.IP "\fBp\fR" 4
Will print laser position and memory cell values

.SH "COMMENTS"
Anything not recognized as a command is a comment.

.SH "EXAMPLE"
An example "Hello World!" program can be written as the following:
.PP
\&----------\e                    /<<<<\e
.br
\&                               '
.br
\&          v                    /
.br
\&          #>------->---------->--->-/
.br
\&          >--=>-=-------==---=>--=\e
.br
\&                /=---------------<<
.br
\&                \e>=---=\e /=>-=>=
.br
\&                         '
.br
\&                         '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       ' '
.br
\&                       \e=/
.PP
Output: Hello World!

.PP
----=   This code outputs '4':

This gets done because `-' adds one to the memory cell, and `=' prints it.

.PP

The first part is a loop:

----------\e                    /<<<<\e
.br
                               '
.br
          v                    /
.br
          #>------->---------->--->-/

The laser gets shot in the top left corner moving to the right (Along the x
axis), when it reaches the `\e' the first memory cell contains 10.

The `\e' will send the laser downwards where it reaches the `v', which does
nothing when approached from above.

The `#' is a junction sending the laser 90 degree counter clockwise if the
memory cell under the pointer is positive.

`>' moves the memory pointer to the right.

The laser will eventually end at `/', at which point it will be redirected
upwards.

`'' will subtract one from the memory cell under the pointer.

The laser will hit the `v' from the side making it go downwards.

The loop finishes with the values `0', `70', `100', `30', `10' in the memory
cells, at which point the `#' junction will do nothing, as the cell under the
cusor is zero.
